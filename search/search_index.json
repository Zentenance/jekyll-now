{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\uc778\ud130\ubdf0 \ud6c4\uae30 2021/6/27 4\uc6d4 10\uc77c \uacbd \ubd80\ud130 \ub9c8\uc774\ud06c\ub85c\uc18c\ud504 \uc2a4\ud06c\ub9ac\ub2dd\uc744 \uc2dc\uc791\uc73c\ub85c \ud398\uc774\uc2a4\ubd81 \ud480\ub77c\uc6b4\ub4dc \uc778\ud130\ubdf0 \uacb0\uacfc\ub97c \ubc1b\uc544 \ubcf8 6\uc6d4 \uccab \uc8fc \uc815\ub3c4 \uae4c\uc9c0, \ub450 \ub2ec \uc5ec\ub97c \uc778\ud130\ubdf0\ub85c \ubcf4\ub0c8\ub2e4. \uc804 \uc9c1\uc7a5\uc774\uc5c8\ub358 \ub9c8\uc774\ud06c\ub85c\uc18c\ud504\ud2b8\uc640 \ud398\uc774\uc2a4\ubd81 \uc778\ud130\ubdf0\ub97c \uc2dc\uc791\ud558\uac8c \ub418\uc5c8\ub358 \ub3d9\uae30\ub97c \uc9c0\uae08 \uc0dd\uac01\ud574 \ubcf4\uc790\uba74, \ub3c8 \ub3c8 \ub3c8 2\ub144 \ud6c4 \uc77c\uc5b4\ub0a0 \uc5f0\ubd09 cliff \uc2a4\ud0a4\uc5d0 \ub300\ud55c \ubbf8\ub828 \ud398\uc774\uc2a4\ubd81 E5\ub85c \uc870\uc778\ud558\uba74 \uc704 \uc138\uac00\uc9c0\uac00 \ubaa8\ub450 \ucda9\uc871\ub418\uae30 \ub54c\ubb38\uc5d0 \uc2dc\uc791\ud588\uace0, \uc911\uac04\uc5d0 \uc5f0\ub77d \uc628 \ub9c8\uc774\ud06c\ub85c\uc18c\ud504\ud2b8\ub3c4 \uc2dc\ud5d8 \uc0bc\uc544 \ubd10\ubd24\ub294\ub370, \uacb0\uad6d \ubaa8\ub450 \ub5a8\uc5b4\uc84c\ub2e4. \uc544\ub9c8\uc874\uc758 \uc5f0\ubd09 cliff \ub54c\ubb38\uc5d0 2\ub144 \ud6c4\uc5d0\ub294 \uacb0\uad6d \uc62e\uaca8\uc57c \ub418\ub2c8, \uc774 \uac78\ub85c \ub05d\uc774 \uc544\ub2c8\uace0 \ubaa8\uc790\ub780 \ubd80\ubd84\uc744 \ucc44\uc6b0\uba70 \uacc4\uc18d \uc900\ube44\ud574\uc57c \ud55c\ub2e4. 8\uc6d4\uc758 \ud06c\ub9ac\uc2a4\ub9c8\uc2a4 2021/6/26 \uc544\ub9c8\uc874 \ud504\ub77c\uc784\uc5d0 8\uc6d4\uc758 \ud06c\ub9ac\uc2a4\ub9c8\uc2a4\uac00. 1998\ub144 \uc601\ud654\ub2e4. IMF\uac00 \uc2dc\uc791\ub418\uc5c8\uc744 \ub54c\uc778\uac00 \uadf8 \uc804 \uc778\uac00. \uc2ec\uc740\ud558\ub294 \uc2f1\uadf8\ub7fd\uace0 \ud55c\uc11d\uaddc\ub3c4 \uadf8 \ub54c\uc758 \uadf8 \ud55c\uc11d\uaddc\ub2e4. \uc9c0\uae08 \ubcf4\ub2c8 \ube5b\uc774 \uc608\uc058\ub2e4. \uc65c \uc9c0\uae08\uc740 \ud55c\uad6d\uc744 \uac00\ub3c4 \uc800\ub7f0 \ube5b\uc744 \ubcfc \uc218 \uc5c6\uc744\uae4c. \ubbf8\ub2eb\uc774 \ubb38\uc73c\ub85c \uc2a4\uba70\ub4dc\ub294 \ube5b. \ud55c \ub0af \ub300\uccad \ub9c8\ub8e8\uc5d0 \ub0b4\ub9ac\ub294 \ube5b. \uc0ac\ub791\uc744 \uac00\uc9c4 \ucc44 \ub5a0\ub09c... 2021\ub144. \uc0ac\uc9c4\ub3c4 \uc0ac\ub77c\uc9c0\uace0 \uc720\ud23d\uacfc \ud2f1\ud1a1\uc774 \uadf8 \uc790\ub9ac\ub97c \ucc28\uc9c0\ud55c \uc138\uc0c1. \ub098\ub294 \uc5b4\ub5bb\uac8c \ud558\uba74 \ubb3c\uac74 \ud558\ub098 \ub354 \ud314\uae4c \uace0\ubbfc\ud558\ub294 \uc544\ub9c8\uc874 Advertising \ud300\uc5d0\uc11c \uc6d4\uae09 \ubc1b\uc544 \uba39\uace0 \uc788\ub2e4. \uc790\ubcf8\uc8fc\uc758\uc758 \ub178\uc608. ... \uce58\uace0\ub294 \ubc8c\uc774\uac00 \uad1c\ucc2e\ub2e4. \uadf8\ub798\uc11c \uacc4\uc18d \uc790\ubcf8\uc8fc\uc758\uc758 \ub178\uc608. \ubc1c\ubaa9\uc744 \uc811\uc9c0\ub984 2021/6/26 \uc62c \ud574 \uccab \ud558\uc774\ud0b9. \uc9c0\ub09c 4, 5\uc6d4\uc744 \uc778\ud130\ubdf0 \uc900\ube44\ud558\ub290\ub77c \ub2e4 \uc18c\ubaa8\ud558\uace0 (\ub2e4 \ub5a8\uc5b4\uc84c\uae30 \ub54c\ubb38\uc5d0 \uccb4\ub825, \uc815\uc2e0\uc740 \uc18c\ubaa8\ud558\uace0 \uc2dc\uac04\uc740 \ud5c8\ube44\ud574 \ubc84\ub9b0). 7\uc6d4\uc774 \ub418\uc11c\uc57c \ub098\uc120 \uc2a4\ub178\uc6b0 \ub808\uc774\ud06c \ud2b8\ub808\uc77c. \ub0b4\ub824\uc624\ub294 \uae38\uc5d0 \ub208\uc744 \ud53c\ud574 \uc810\ud504\ud558\ub2e4 \uc67c\ucabd \ubc1c\ubaa9\uc744 \uc811\uc9c8\ub800\ub2e4. \uc778\ub300\uac00 \ub298\uc5b4 \ub0ac\uac70\ub098 \ubf08\uac00 \uc5b4\ub5bb\uac8c \ub41c \uac83 \uac19\uc9c0\ub294 \uc54a\uc9c0\ub9cc \ud68c\ubcf5 \ub418\ub824\uba74 \ud55c \ub450 \uc8fc \uac78\ub9b4 \ub4ef. \uac00\uc9c0\uace0 \uac04 \uc2a4\ud2f1\uc744 \uc37c\uc5b4\uc57c \ub418\ub294\ub370 \uc65c \ub54c\ubb38\uc778\uc9c0 \uacfc\uc2e0\ud568. \uc0ac\uc9c4\uc740 7\uc6d4\uc774 \ucf54 \uc55e\uc778\ub370 \uc544\uc9c1 \uc5bc\uc5b4 \uc788\ub294 Snow Lake. \uc800 \uc5bc\uc74c\uc774 \ub179\uc73c\uba74 \uc5d0\uba54\ub784\ub4dc \ube5b\uc758 \ud638\uc218\ub97c \ubcfc \uc218 \uc788\ub294\ub370. \uadf8\uac74 \ubcf4\uc9c0 \ubabb\ud558\uace0 \ub274\uc695\uc73c\ub85c \ub0a0\uc544\uac00\uac8c \ub420 \ub4ef. \uc62c \ud574 \uccab \ud558\uc774\ud0b9\uc5d0\uc11c \ubc1c\ubaa9\uc744 \uc811\uc9c0\ub978 \ubc14\ub78c\uc5d0 \uc774\uac8c \uc2dc\uc560\ud2c0\uc5d0\uc11c \ucc98\uc74c\uc774\uc790 \ub9c8\uc9c0\ub9c9\uc774 \ub41c \ud558\uc774\ud0b9. FREE Hit Counters","title":"Home"},{"location":"#_1","text":"2021/6/27 4\uc6d4 10\uc77c \uacbd \ubd80\ud130 \ub9c8\uc774\ud06c\ub85c\uc18c\ud504 \uc2a4\ud06c\ub9ac\ub2dd\uc744 \uc2dc\uc791\uc73c\ub85c \ud398\uc774\uc2a4\ubd81 \ud480\ub77c\uc6b4\ub4dc \uc778\ud130\ubdf0 \uacb0\uacfc\ub97c \ubc1b\uc544 \ubcf8 6\uc6d4 \uccab \uc8fc \uc815\ub3c4 \uae4c\uc9c0, \ub450 \ub2ec \uc5ec\ub97c \uc778\ud130\ubdf0\ub85c \ubcf4\ub0c8\ub2e4. \uc804 \uc9c1\uc7a5\uc774\uc5c8\ub358 \ub9c8\uc774\ud06c\ub85c\uc18c\ud504\ud2b8\uc640 \ud398\uc774\uc2a4\ubd81 \uc778\ud130\ubdf0\ub97c \uc2dc\uc791\ud558\uac8c \ub418\uc5c8\ub358 \ub3d9\uae30\ub97c \uc9c0\uae08 \uc0dd\uac01\ud574 \ubcf4\uc790\uba74, \ub3c8 \ub3c8 \ub3c8 2\ub144 \ud6c4 \uc77c\uc5b4\ub0a0 \uc5f0\ubd09 cliff \uc2a4\ud0a4\uc5d0 \ub300\ud55c \ubbf8\ub828 \ud398\uc774\uc2a4\ubd81 E5\ub85c \uc870\uc778\ud558\uba74 \uc704 \uc138\uac00\uc9c0\uac00 \ubaa8\ub450 \ucda9\uc871\ub418\uae30 \ub54c\ubb38\uc5d0 \uc2dc\uc791\ud588\uace0, \uc911\uac04\uc5d0 \uc5f0\ub77d \uc628 \ub9c8\uc774\ud06c\ub85c\uc18c\ud504\ud2b8\ub3c4 \uc2dc\ud5d8 \uc0bc\uc544 \ubd10\ubd24\ub294\ub370, \uacb0\uad6d \ubaa8\ub450 \ub5a8\uc5b4\uc84c\ub2e4. \uc544\ub9c8\uc874\uc758 \uc5f0\ubd09 cliff \ub54c\ubb38\uc5d0 2\ub144 \ud6c4\uc5d0\ub294 \uacb0\uad6d \uc62e\uaca8\uc57c \ub418\ub2c8, \uc774 \uac78\ub85c \ub05d\uc774 \uc544\ub2c8\uace0 \ubaa8\uc790\ub780 \ubd80\ubd84\uc744 \ucc44\uc6b0\uba70 \uacc4\uc18d \uc900\ube44\ud574\uc57c \ud55c\ub2e4.","title":"\uc778\ud130\ubdf0 \ud6c4\uae30"},{"location":"#8","text":"2021/6/26 \uc544\ub9c8\uc874 \ud504\ub77c\uc784\uc5d0 8\uc6d4\uc758 \ud06c\ub9ac\uc2a4\ub9c8\uc2a4\uac00. 1998\ub144 \uc601\ud654\ub2e4. IMF\uac00 \uc2dc\uc791\ub418\uc5c8\uc744 \ub54c\uc778\uac00 \uadf8 \uc804 \uc778\uac00. \uc2ec\uc740\ud558\ub294 \uc2f1\uadf8\ub7fd\uace0 \ud55c\uc11d\uaddc\ub3c4 \uadf8 \ub54c\uc758 \uadf8 \ud55c\uc11d\uaddc\ub2e4. \uc9c0\uae08 \ubcf4\ub2c8 \ube5b\uc774 \uc608\uc058\ub2e4. \uc65c \uc9c0\uae08\uc740 \ud55c\uad6d\uc744 \uac00\ub3c4 \uc800\ub7f0 \ube5b\uc744 \ubcfc \uc218 \uc5c6\uc744\uae4c. \ubbf8\ub2eb\uc774 \ubb38\uc73c\ub85c \uc2a4\uba70\ub4dc\ub294 \ube5b. \ud55c \ub0af \ub300\uccad \ub9c8\ub8e8\uc5d0 \ub0b4\ub9ac\ub294 \ube5b. \uc0ac\ub791\uc744 \uac00\uc9c4 \ucc44 \ub5a0\ub09c... 2021\ub144. \uc0ac\uc9c4\ub3c4 \uc0ac\ub77c\uc9c0\uace0 \uc720\ud23d\uacfc \ud2f1\ud1a1\uc774 \uadf8 \uc790\ub9ac\ub97c \ucc28\uc9c0\ud55c \uc138\uc0c1. \ub098\ub294 \uc5b4\ub5bb\uac8c \ud558\uba74 \ubb3c\uac74 \ud558\ub098 \ub354 \ud314\uae4c \uace0\ubbfc\ud558\ub294 \uc544\ub9c8\uc874 Advertising \ud300\uc5d0\uc11c \uc6d4\uae09 \ubc1b\uc544 \uba39\uace0 \uc788\ub2e4. \uc790\ubcf8\uc8fc\uc758\uc758 \ub178\uc608. ... \uce58\uace0\ub294 \ubc8c\uc774\uac00 \uad1c\ucc2e\ub2e4. \uadf8\ub798\uc11c \uacc4\uc18d \uc790\ubcf8\uc8fc\uc758\uc758 \ub178\uc608.","title":"8\uc6d4\uc758 \ud06c\ub9ac\uc2a4\ub9c8\uc2a4"},{"location":"#_2","text":"2021/6/26 \uc62c \ud574 \uccab \ud558\uc774\ud0b9. \uc9c0\ub09c 4, 5\uc6d4\uc744 \uc778\ud130\ubdf0 \uc900\ube44\ud558\ub290\ub77c \ub2e4 \uc18c\ubaa8\ud558\uace0 (\ub2e4 \ub5a8\uc5b4\uc84c\uae30 \ub54c\ubb38\uc5d0 \uccb4\ub825, \uc815\uc2e0\uc740 \uc18c\ubaa8\ud558\uace0 \uc2dc\uac04\uc740 \ud5c8\ube44\ud574 \ubc84\ub9b0). 7\uc6d4\uc774 \ub418\uc11c\uc57c \ub098\uc120 \uc2a4\ub178\uc6b0 \ub808\uc774\ud06c \ud2b8\ub808\uc77c. \ub0b4\ub824\uc624\ub294 \uae38\uc5d0 \ub208\uc744 \ud53c\ud574 \uc810\ud504\ud558\ub2e4 \uc67c\ucabd \ubc1c\ubaa9\uc744 \uc811\uc9c8\ub800\ub2e4. \uc778\ub300\uac00 \ub298\uc5b4 \ub0ac\uac70\ub098 \ubf08\uac00 \uc5b4\ub5bb\uac8c \ub41c \uac83 \uac19\uc9c0\ub294 \uc54a\uc9c0\ub9cc \ud68c\ubcf5 \ub418\ub824\uba74 \ud55c \ub450 \uc8fc \uac78\ub9b4 \ub4ef. \uac00\uc9c0\uace0 \uac04 \uc2a4\ud2f1\uc744 \uc37c\uc5b4\uc57c \ub418\ub294\ub370 \uc65c \ub54c\ubb38\uc778\uc9c0 \uacfc\uc2e0\ud568. \uc0ac\uc9c4\uc740 7\uc6d4\uc774 \ucf54 \uc55e\uc778\ub370 \uc544\uc9c1 \uc5bc\uc5b4 \uc788\ub294 Snow Lake. \uc800 \uc5bc\uc74c\uc774 \ub179\uc73c\uba74 \uc5d0\uba54\ub784\ub4dc \ube5b\uc758 \ud638\uc218\ub97c \ubcfc \uc218 \uc788\ub294\ub370. \uadf8\uac74 \ubcf4\uc9c0 \ubabb\ud558\uace0 \ub274\uc695\uc73c\ub85c \ub0a0\uc544\uac00\uac8c \ub420 \ub4ef. \uc62c \ud574 \uccab \ud558\uc774\ud0b9\uc5d0\uc11c \ubc1c\ubaa9\uc744 \uc811\uc9c0\ub978 \ubc14\ub78c\uc5d0 \uc774\uac8c \uc2dc\uc560\ud2c0\uc5d0\uc11c \ucc98\uc74c\uc774\uc790 \ub9c8\uc9c0\ub9c9\uc774 \ub41c \ud558\uc774\ud0b9. FREE Hit Counters","title":"\ubc1c\ubaa9\uc744 \uc811\uc9c0\ub984"},{"location":"about/","text":"\uc138\uc601/Seyoung \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc5d4\uc9c0\ub2c8\uc5b4. \ubbf8\uad6d\uc5d0\uc11c \uc77c\ud55c\uc9c0\ub294 10\ub144 \uc880 \ub118\uc5c8\uc2b5\ub2c8\ub2e4. \uc0bc \ub144 \uc804 \uc2dc\uc560\ud2c0\ub85c \uc628 \ud6c4 \uc2dc\uc791\ud55c \uc2a4\ud0a4\uc5d0 \ubbf8\uccd0 \uc9c0\ub0c8\uc73c\uba70, \uc5ec\ub984\uc5d4 \uc778\ub77c\uc778\uc744 \ud0d1\ub2c8\ub2e4. Slef-motivated software engineer. I like skiing, hiking and inline skating when not working here in Seattle. Amazon, Seattle, 2019 - current Microsoft, Redmond, 2018 - 2019 Qualcomm, San Diego, 2008 - 2018 LinkedIn: https://www.linkedin.com/in/seyoung/ Eamil: seyoungjeong@gmail.com","title":"About me"},{"location":"about/#seyoung","text":"\uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc5d4\uc9c0\ub2c8\uc5b4. \ubbf8\uad6d\uc5d0\uc11c \uc77c\ud55c\uc9c0\ub294 10\ub144 \uc880 \ub118\uc5c8\uc2b5\ub2c8\ub2e4. \uc0bc \ub144 \uc804 \uc2dc\uc560\ud2c0\ub85c \uc628 \ud6c4 \uc2dc\uc791\ud55c \uc2a4\ud0a4\uc5d0 \ubbf8\uccd0 \uc9c0\ub0c8\uc73c\uba70, \uc5ec\ub984\uc5d4 \uc778\ub77c\uc778\uc744 \ud0d1\ub2c8\ub2e4. Slef-motivated software engineer. I like skiing, hiking and inline skating when not working here in Seattle. Amazon, Seattle, 2019 - current Microsoft, Redmond, 2018 - 2019 Qualcomm, San Diego, 2008 - 2018 LinkedIn: https://www.linkedin.com/in/seyoung/ Eamil: seyoungjeong@gmail.com","title":"\uc138\uc601/Seyoung"},{"location":"feel/","text":"\uc601\ud654 8\uc6d4\uc758 \ud06c\ub9ac\uc2a4\ub9c8\uc2a4 \ucc45 \uac00\ubcf8 \uacf3","title":"\uc77d\uace0 \ubcf8 \uac83 \ub4e4, \uc5ec\ud589"},{"location":"feel/#_1","text":"8\uc6d4\uc758 \ud06c\ub9ac\uc2a4\ub9c8\uc2a4","title":"\uc601\ud654"},{"location":"feel/#_2","text":"","title":"\ucc45"},{"location":"feel/#_3","text":"","title":"\uac00\ubcf8 \uacf3"},{"location":"nyc/","text":"","title":"NYC"},{"location":"seattle_hiking/","text":"\uc2dc\uc560\ud2c0 \uadfc\ucc98 \ud558\uc774\ud0b9 \ud2b8\ub808\uc77c \uc9e7\uac8c \uc0bc \ub144\uc744 \uc2dc\uc560\ud2c0\uc5d0 \uc0b4\uba74\uc11c \ub2e4\ub140 \ubd24\ub358 \ud2b8\ub808\uc77c \uc911 \ubca0\uc2a4\ud2b8\ub97c \uc815\ub9ac\ud574 \ubd05\ub2c8\ub2e4. 1. Snow Lake Trail \uc2a4\ub178\uc6b0 \ub808\uc774\ud06c \ud2b8\ub808\uc77c\uc740 \uc2a4\ub178\uaf50\ubbf8 \uc54c\ud39c\ud0c8 \uc8fc\ucc28\uc7a5\uc5d0\uc11c \uc2dc\uc791\ud558\ub294 \uc655\ubcf5 \uc138 \uc2dc\uac04 \uc815\ub3c4\uc758 \ud558\uc774\ud0b9 \ud2b8\ub808\uc77c\uc785\ub2c8\ub2e4. \ub09c\uc774\ub3c4\ub294 \uc911\uac04 \uc815\ub3c4. \ub192\uc774 \uc62c\ub77c\uac00\uc9c0\ub294 \uc54a\uc9c0\ub9cc \uc880 \ud070 \ub3cc\ub4e4\uc774 \uae54\ub824 \uc788\ub294 \uacf3\ub4e4\uc774 \uc788\uc5b4\uc11c \uc27d\uc9c0\ub294 \uc54a\uc740 \ud2b8\ub808\uc77c\uc785\ub2c8\ub2e4. \ubb34\ub98e\uc774\ub098 \ubc1c\ubaa9 \ubcf4\ud638\ub97c \uc704\ud574\uc11c \ud558\uc774\ud0b9 \uc2a4\ud2f1 \ud544\uc218 \uc785\ub2c8\ub2e4. \uc804 \uc624\ub298 (2021/6/26) \uc548\uc77c\ud558\uac8c","title":"Hiking Trails"},{"location":"seattle_hiking/#_1","text":"\uc9e7\uac8c \uc0bc \ub144\uc744 \uc2dc\uc560\ud2c0\uc5d0 \uc0b4\uba74\uc11c \ub2e4\ub140 \ubd24\ub358 \ud2b8\ub808\uc77c \uc911 \ubca0\uc2a4\ud2b8\ub97c \uc815\ub9ac\ud574 \ubd05\ub2c8\ub2e4.","title":"\uc2dc\uc560\ud2c0 \uadfc\ucc98 \ud558\uc774\ud0b9 \ud2b8\ub808\uc77c"},{"location":"seattle_hiking/#1-snow-lake-trail","text":"\uc2a4\ub178\uc6b0 \ub808\uc774\ud06c \ud2b8\ub808\uc77c\uc740 \uc2a4\ub178\uaf50\ubbf8 \uc54c\ud39c\ud0c8 \uc8fc\ucc28\uc7a5\uc5d0\uc11c \uc2dc\uc791\ud558\ub294 \uc655\ubcf5 \uc138 \uc2dc\uac04 \uc815\ub3c4\uc758 \ud558\uc774\ud0b9 \ud2b8\ub808\uc77c\uc785\ub2c8\ub2e4. \ub09c\uc774\ub3c4\ub294 \uc911\uac04 \uc815\ub3c4. \ub192\uc774 \uc62c\ub77c\uac00\uc9c0\ub294 \uc54a\uc9c0\ub9cc \uc880 \ud070 \ub3cc\ub4e4\uc774 \uae54\ub824 \uc788\ub294 \uacf3\ub4e4\uc774 \uc788\uc5b4\uc11c \uc27d\uc9c0\ub294 \uc54a\uc740 \ud2b8\ub808\uc77c\uc785\ub2c8\ub2e4. \ubb34\ub98e\uc774\ub098 \ubc1c\ubaa9 \ubcf4\ud638\ub97c \uc704\ud574\uc11c \ud558\uc774\ud0b9 \uc2a4\ud2f1 \ud544\uc218 \uc785\ub2c8\ub2e4. \uc804 \uc624\ub298 (2021/6/26) \uc548\uc77c\ud558\uac8c","title":"1. Snow Lake Trail"},{"location":"seattle_ski/","text":"Season 20/21 2021\ub144 4\uc6d4 \uccab \uc8fc, Spring snow storm\uc774 \uc654\ub358 \uc8fc Low International, Alpental Chair2\uc5d0\uc11c International\ub85c \ub0b4\ub824 \uc624\ub2e4\uac00 \ubcf4\uba74 \uc624\ub978\ucabd\uc73c\ub85c \ube60\uc9c0\ub294 \ud2b8\ub808\ubc84\uc2a4\uac00 \ubcf4\uc778\ub2e4. \uc5ec\uae30\ub85c \ube60\uc9c0\uba74 \ub9f5\uc5d0\ub294 \uc5c6\ub294 \uc0ac\ub78c\ub4e4\uc774 \ub9ce\uc774 \ud0c0\uc9c0 \uc54a\uc740 \ub208\uc744 \ubc1c\uacac\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4. \ubcf4\ud1b5\uc740 \uc870\uae08\ub9cc \uac00\uc11c \uc9c0\ub3c4\uc758 \ub179\uc0c9 \ud654\uc0b4\ud45c\uac00 \ud45c\uc2dc\ub41c \uc9c0\uc810 \ucbe4\uc5d0\uc11c \ub0b4\ub824 \uc624\uace4 \ud588\ub294\ub370, \uc774 \ub0a0\uc740 \uc8fc\uc6b1 Shot Six\uc640 \ub9cc\ub098\ub294 \uc9c0\uc810 \uae4c\uc9c0 \uacc4\uc18d \uac14\ub2e4. \ub208\uc774 \ub108\ubb34 \uc88b\uc544\uc11c. \ub9f5\uc5d0\uc11c \ub179\uc0c9\uc73c\ub85c \ud45c\uc2dc\ub41c \uacf3\uc744 \ud2b8\ub798\ubc84\uc2a4\ud574\uc11c \uc8fc\uc6b1. \uc774 \ub0a0\uc774 4/11. \uc608\ub144 \uac19\uc73c\uba74 \uc774 \ub9d8 \ucbe4\uc758 \ub208\uc740 \ub048\uc801\ub048\uc801 \ud55c \uc2a4\ud504\ub9c1 \uc2a4\ub178\uc6b0 \ucee8\ub514\uc158\uc778\ub370 \uadf8 \uc8fc\ub294 \uc815\ub9d0 \ud55c \uaca8\uc6b8 \ub208 \ubea8 \uc2f8\ub2e4\uad6c \ub0a0\ub9b4 \uc815\ub3c4\ub85c \ubcf4\uc1a1\ud55c \ub208\uc774 \ud568\ubc15 \ub0b4\ub838\ub2e4. \uc2a4\ud504\ub9c1 \uc2a4\ub178\uc6b0 \uc2a4\ud1b0. \uc774 \ub0a0\ub3c4 \ud589\ubcf5\ud55c \uc2a4\ud0a4\ub97c \uc990\uae34 \ub0a0. Central, Snoquelmie","title":"Ski"},{"location":"seattle_ski/#season-2021","text":"","title":"Season 20/21"},{"location":"seattle_ski/#2021-4-spring-snow-storm","text":"","title":"2021\ub144 4\uc6d4 \uccab \uc8fc, Spring snow storm\uc774 \uc654\ub358 \uc8fc"},{"location":"seattle_ski/#low-international-alpental","text":"Chair2\uc5d0\uc11c International\ub85c \ub0b4\ub824 \uc624\ub2e4\uac00 \ubcf4\uba74 \uc624\ub978\ucabd\uc73c\ub85c \ube60\uc9c0\ub294 \ud2b8\ub808\ubc84\uc2a4\uac00 \ubcf4\uc778\ub2e4. \uc5ec\uae30\ub85c \ube60\uc9c0\uba74 \ub9f5\uc5d0\ub294 \uc5c6\ub294 \uc0ac\ub78c\ub4e4\uc774 \ub9ce\uc774 \ud0c0\uc9c0 \uc54a\uc740 \ub208\uc744 \ubc1c\uacac\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4. \ubcf4\ud1b5\uc740 \uc870\uae08\ub9cc \uac00\uc11c \uc9c0\ub3c4\uc758 \ub179\uc0c9 \ud654\uc0b4\ud45c\uac00 \ud45c\uc2dc\ub41c \uc9c0\uc810 \ucbe4\uc5d0\uc11c \ub0b4\ub824 \uc624\uace4 \ud588\ub294\ub370, \uc774 \ub0a0\uc740 \uc8fc\uc6b1 Shot Six\uc640 \ub9cc\ub098\ub294 \uc9c0\uc810 \uae4c\uc9c0 \uacc4\uc18d \uac14\ub2e4. \ub208\uc774 \ub108\ubb34 \uc88b\uc544\uc11c. \ub9f5\uc5d0\uc11c \ub179\uc0c9\uc73c\ub85c \ud45c\uc2dc\ub41c \uacf3\uc744 \ud2b8\ub798\ubc84\uc2a4\ud574\uc11c \uc8fc\uc6b1. \uc774 \ub0a0\uc774 4/11. \uc608\ub144 \uac19\uc73c\uba74 \uc774 \ub9d8 \ucbe4\uc758 \ub208\uc740 \ub048\uc801\ub048\uc801 \ud55c \uc2a4\ud504\ub9c1 \uc2a4\ub178\uc6b0 \ucee8\ub514\uc158\uc778\ub370 \uadf8 \uc8fc\ub294 \uc815\ub9d0 \ud55c \uaca8\uc6b8 \ub208 \ubea8 \uc2f8\ub2e4\uad6c \ub0a0\ub9b4 \uc815\ub3c4\ub85c \ubcf4\uc1a1\ud55c \ub208\uc774 \ud568\ubc15 \ub0b4\ub838\ub2e4. \uc2a4\ud504\ub9c1 \uc2a4\ub178\uc6b0 \uc2a4\ud1b0. \uc774 \ub0a0\ub3c4 \ud589\ubcf5\ud55c \uc2a4\ud0a4\ub97c \uc990\uae34 \ub0a0.","title":"Low International, Alpental"},{"location":"seattle_ski/#central-snoquelmie","text":"","title":"Central, Snoquelmie"},{"location":"tech/","text":"Embedded Ring Buffer","title":"Technically"},{"location":"tech/#embedded","text":"Ring Buffer","title":"Embedded"},{"location":"tech/ring_buffer/","text":"Ring buffer Overview Implement a ring buffer in C. The ring buffer structure is also known as a circular queue. The different names come from two different usages. In embedded systems, in order to receive and send data to a peripheral device such as UART, a ring buffer is common to cache the data. The same structure is used for a certain RTOS to send and receive an event and dad between tasks. Structure It can be implemented using a linked list or an array. The diagram below is the ring buffer with size 4 using array. The four variables got involved in working with the ring buffer. They are capacity , length , read index and write index . capacity : capacity of ring buffers. Here it is 4. length : length of the buffers holding datas. Here it is 2 read index : point to the start buffer to read write index : point to the start buffer to write Implementation This is the struct Queue written in C. struct Queue { char *buf; size_t capacity; size_t length; size_t read; size_t write; }; int init_queue(struct Queue *q, size_t capacity); int enqueue(strcut Queue *q, char *data, size_t len); int dequeue(struct Queue *q, char *data, size_t len); int main() { Queue myqueue; assert(0 == init_queue(&myqueue, 4); return 0; } int init_queue(struct Queue *q, size_t capacity) { q->buf = (char*)malloc(capacity); if (!q->buf) return -1; q->capacity = capacity; q->len = q->read = q->write = 0; return 0; } We update four variables in cases; 1. When init_queue gets called, we update the capacity as total allocated buffer size. 2. In enqueue() , we do memcpy() the buffer to the data and update read index to read += len 3. In dequeue() , we do memcpy() the data to the buffer and update write index to write += len 4. In case 3 and 4, we update the length to length += len and length -= len respectively. Now tricky part comes up. How do we do memcpy() the data, and update read and write index, when the data need to be copied all the way to end of the ring and continue to be copied from the beginning. This is the case with calling enqueue(&myqueue, data, 3) when the ring buffer is holding the data in the picture below. Here is my two cents. When the problem looks complicating to tackle down, don\u2019t panic. Divide it to small sub problems you are familiar with. We just need to do memcpy() two times, one for the data till the end and second one for the data from the beginning wile carefully updating the write index, and source and target pointers for memcpy() . Let\u2019s do this. // first copy till the end size_t len_to_end = MIN(len, q->capacity - q->write); memcpy(q->buf + write, data, len_to_end); // second copy from the begining of the buf with the remainings if (len > len_to_end) memcpy(q->buf, data + len_to_end, len - len_to_end); // update the write index and length of ring buffer write = (write + len) % q->capacity; q->len += len; This is it. To address the case to read circle around from the ring buffer, we implement the similar logic in dequeue() . Before wrapping up, the last thing nice to have is helper functions below. static bool is_full(struct Queue *q) { return q->capacity == q->length; } static bool is_empty(struct Queue *q) { return q->read == q->write; } static size_t get_empty_buffers_length(struct Queue *q) { return q->capacity - q->length; } Summary and dicussion We implemented a ring buffer using four variables. Actually we don\u2019t need all of write , read and length to implement the ring buffer. For example with read and length , we can come up with write index. With write and read we can calculate the length of ring buffer. Because length is referenced by enqueue() and dequeue() , mutex is required to allow multithreads to access the ring buffer. By removing length and having write and read only , we can possibly have lock-free implementation. For lock-free implementation details, Juho wrote a nice blog post - I\u2019ve been writing ring buffers wrong all these years . Copyright \u00a9 Seyoung Jeong, All right reserved","title":"Ring buffer"},{"location":"tech/ring_buffer/#ring-buffer","text":"","title":"Ring buffer"},{"location":"tech/ring_buffer/#overview","text":"Implement a ring buffer in C. The ring buffer structure is also known as a circular queue. The different names come from two different usages. In embedded systems, in order to receive and send data to a peripheral device such as UART, a ring buffer is common to cache the data. The same structure is used for a certain RTOS to send and receive an event and dad between tasks.","title":"Overview"},{"location":"tech/ring_buffer/#structure","text":"It can be implemented using a linked list or an array. The diagram below is the ring buffer with size 4 using array. The four variables got involved in working with the ring buffer. They are capacity , length , read index and write index . capacity : capacity of ring buffers. Here it is 4. length : length of the buffers holding datas. Here it is 2 read index : point to the start buffer to read write index : point to the start buffer to write","title":"Structure"},{"location":"tech/ring_buffer/#implementation","text":"This is the struct Queue written in C. struct Queue { char *buf; size_t capacity; size_t length; size_t read; size_t write; }; int init_queue(struct Queue *q, size_t capacity); int enqueue(strcut Queue *q, char *data, size_t len); int dequeue(struct Queue *q, char *data, size_t len); int main() { Queue myqueue; assert(0 == init_queue(&myqueue, 4); return 0; } int init_queue(struct Queue *q, size_t capacity) { q->buf = (char*)malloc(capacity); if (!q->buf) return -1; q->capacity = capacity; q->len = q->read = q->write = 0; return 0; } We update four variables in cases; 1. When init_queue gets called, we update the capacity as total allocated buffer size. 2. In enqueue() , we do memcpy() the buffer to the data and update read index to read += len 3. In dequeue() , we do memcpy() the data to the buffer and update write index to write += len 4. In case 3 and 4, we update the length to length += len and length -= len respectively. Now tricky part comes up. How do we do memcpy() the data, and update read and write index, when the data need to be copied all the way to end of the ring and continue to be copied from the beginning. This is the case with calling enqueue(&myqueue, data, 3) when the ring buffer is holding the data in the picture below. Here is my two cents. When the problem looks complicating to tackle down, don\u2019t panic. Divide it to small sub problems you are familiar with. We just need to do memcpy() two times, one for the data till the end and second one for the data from the beginning wile carefully updating the write index, and source and target pointers for memcpy() . Let\u2019s do this. // first copy till the end size_t len_to_end = MIN(len, q->capacity - q->write); memcpy(q->buf + write, data, len_to_end); // second copy from the begining of the buf with the remainings if (len > len_to_end) memcpy(q->buf, data + len_to_end, len - len_to_end); // update the write index and length of ring buffer write = (write + len) % q->capacity; q->len += len; This is it. To address the case to read circle around from the ring buffer, we implement the similar logic in dequeue() . Before wrapping up, the last thing nice to have is helper functions below. static bool is_full(struct Queue *q) { return q->capacity == q->length; } static bool is_empty(struct Queue *q) { return q->read == q->write; } static size_t get_empty_buffers_length(struct Queue *q) { return q->capacity - q->length; }","title":"Implementation"},{"location":"tech/ring_buffer/#summary-and-dicussion","text":"We implemented a ring buffer using four variables. Actually we don\u2019t need all of write , read and length to implement the ring buffer. For example with read and length , we can come up with write index. With write and read we can calculate the length of ring buffer. Because length is referenced by enqueue() and dequeue() , mutex is required to allow multithreads to access the ring buffer. By removing length and having write and read only , we can possibly have lock-free implementation. For lock-free implementation details, Juho wrote a nice blog post - I\u2019ve been writing ring buffers wrong all these years . Copyright \u00a9 Seyoung Jeong, All right reserved","title":"Summary and dicussion"}]}